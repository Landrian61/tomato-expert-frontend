/// <reference lib="webworker" />

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// Important: Make sure you've installed the required dependencies:
// npm install workbox-core workbox-expiration workbox-precaching workbox-routing workbox-strategies --save

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';

// Catch and log any errors that occur during service worker operation
self.addEventListener('error', (event) => {
  console.error('Service Worker error:', event.error);
});

// Claim clients so that the service worker is activated immediately
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// @ts-ignore
const manifest = self.__WB_MANIFEST;
precacheAndRoute(manifest);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, it's not an App Shell route.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a file:
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache API responses for environmental data
registerRoute(
  ({ url }) => url.pathname.includes('/environmental') || url.pathname.includes('/weather'),
  new NetworkFirst({
    cacheName: 'environmental-data',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Cache other API responses with stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.pathname.includes('/api'),
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 12 * 60 * 60, // 12 hours
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    (self as unknown as ServiceWorkerGlobalScope).skipWaiting();
  }
});

// Handle push events for push notifications
self.addEventListener('push', (event) => {
  if (!event.data) return;
  
  try {
    const data = event.data.json();
    const title = data.notification?.title || 'Tomato Expert';
    const options = {
      body: data.notification?.body || 'You have a new notification',
      icon: '/android-chrome-192x192.png',
      badge: '/favicon.ico',
      data: data.data || {},
      actions: [
        {
          action: 'view',
          title: 'View Details'
        }
      ],
      vibrate: [200, 100, 200],
      tag: data.data?.notificationId || 'general',
      renotify: true
    };

    event.waitUntil(
      (self as unknown as ServiceWorkerGlobalScope).registration.showNotification(title, options)
    );
  } catch (err) {
    console.error('Error showing notification:', err);
  }
});

// Handle notification click events
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  // Extract data from the notification
  const notificationData = event.notification.data;
  let url = '/';

  // Determine URL based on notification type
  if (notificationData.type === 'diagnosis') {
    url = `/diagnosis/${notificationData.diagnosisId || ''}`;
  } else if (notificationData.type === 'weather' || notificationData.type === 'blight') {
    url = '/insights';
  } else if (notificationData.type === 'tip') {
    url = '/tips';
  }

  // If action is view, handle view action
  if (event.action === 'view' && notificationData.url) {
    url = notificationData.url;
  }

  // Open the appropriate URL
  event.waitUntil(
    (self as unknown as ServiceWorkerGlobalScope).clients.matchAll({ 
      type: 'window',
      includeUncontrolled: true
    }).then((clientList) => {
      // If a window client is already open, focus it and navigate
      for (const client of clientList) {
        if ('focus' in client && 'navigate' in client) {
          return client.focus().then((focusedClient) => focusedClient.navigate(url));
        }
      }
      // If no window client is open, open a new one
      if ((self as unknown as ServiceWorkerGlobalScope).clients.openWindow) {
        return (self as unknown as ServiceWorkerGlobalScope).clients.openWindow(url);
      }
    })
  );
});
